/* ===========================================================
# sphere-node-connect - v0.3.0
# ==============================================================
# Copyright (c) 2013 Nicola Molinari
# Licensed under the MIT license.
*/
var OAuth2, querystring, request, _;

_ = require("underscore")._;

querystring = require('querystring');

request = require('request');

OAuth2 = (function() {
  function OAuth2(opts) {
    var config, rejectUnauthorized;
    if (opts == null) {
      opts = {};
    }
    config = opts.config;
    if (!config) {
      throw new Error("Missing credentials");
    }
    if (!config.client_id) {
      throw new Error("Missing 'client_id'");
    }
    if (!config.client_secret) {
      throw new Error("Missing 'client_secret'");
    }
    if (!config.project_key) {
      throw new Error("Missing 'project_key'");
    }
    rejectUnauthorized = _.isUndefined(opts.rejectUnauthorized) ? true : opts.rejectUnauthorized;
    this._options = {
      config: config,
      host: opts.host || "auth.sphere.io",
      accessTokenUrl: opts.accessTokenUrl || "/oauth/token",
      timeout: opts.timeout || 20000,
      rejectUnauthorized: rejectUnauthorized
    };
    return;
  }

  OAuth2.prototype.getAccessToken = function(callback) {
    var params, payload, request_options;
    params = {
      grant_type: "client_credentials",
      scope: "manage_project:" + this._options.config.project_key
    };
    payload = querystring.stringify(params);
    request_options = {
      uri: "https://" + this._options.config.client_id + ":" + this._options.config.client_secret + "@" + this._options.host + this._options.accessTokenUrl,
      json: true,
      method: "POST",
      body: payload,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        "Content-Length": payload.length
      },
      timeout: this._options.timeout,
      rejectUnauthorized: this._options.rejectUnauthorized
    };
    return request(request_options, callback);
  };

  return OAuth2;

})();


/*
Exports object
 */

module.exports = OAuth2;
