var _;

_ = require('underscore');


/**
 * A collection of methods to be used as underscore mixins
 * @example
 *   _ = require 'underscore'
 *   {_u} = require 'sphere-node-utils'
 *   _.mixin _u
 *
 *   # or
 *   _.mixin require('sphere-node-utils')._u
 */

module.exports = {

  /**
   * Returns a deep clone of the given object
   * @param {Object} obj A JSON object
   * @return {Object} A deep clone of the given object
   */
  deepClone: function(obj) {
    if (!obj) {
      return {};
    }
    return JSON.parse(JSON.stringify(obj));
  },

  /**
   * Returns the percentage of the given values
   * @param {Number} x The current number out of total
   * @param {Number} tot The total number to calculate the percentage
   * @retrun {Number} The percentage value, rounded
   */
  percentage: function(x, tot) {
    return Math.round(x * 100 / tot);
  },

  /**
   * Returns a URL query string from a key-value object
   * @param {Object} params A JSON object containing key-value query params
   * @retrun {String} A query string, or empty if params is undefined
   */
  stringifyQuery: function(params) {
    var query;
    if (!params) {
      return "";
    }
    query = _.reduce(params, function(memo, value, key) {
      memo.push("" + key + "=" + value);
      return memo;
    }, []);
    return query.join("&");
  },

  /**
   * Returns a key-value JSON object from a query string
   * @param {String} query A query string
   * @retrun {Object} A JSON object (note that all values are parsed as string)
   */
  parseQuery: function(query) {
    if (!query) {
      return {};
    }
    return _.reduce(query.split('&'), function(memo, param) {
      var key, splitted, value;
      splitted = param.split('=');
      if (_.size(splitted) < 2) {
        return memo;
      }
      key = splitted[0];
      value = splitted[1];
      memo[key] = value;
      return memo;
    }, {});
  }
};
