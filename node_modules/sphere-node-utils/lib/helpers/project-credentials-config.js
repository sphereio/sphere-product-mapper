var ProjectCredentialsConfig, Q, csv, fs, _;

Q = require('q');

fs = require('q-io/fs');

_ = require('underscore')._;

_.mixin(require('underscore.string'));

csv = require('csv');


/**
 * Provides sphere credentials based on the project key.
 *
 * Following files are used to store the credentials and would be searched (descending priority):
 *
 * ./.sphere-project-credentials
 * ./.sphere-project-credentials.json
 * ~/.sphere-project-credentials
 * ~/.sphere-project-credentials.json
 * /etc/.sphere-project-credentials
 * /etc/.sphere-project-credentials.json
 */

ProjectCredentialsConfig = (function() {
  ProjectCredentialsConfig.create = function(options) {
    if (options == null) {
      options = {};
    }
    return (new ProjectCredentialsConfig(options))._init();
  };

  function ProjectCredentialsConfig(options) {
    if (options == null) {
      options = {};
    }
    this._baseName = options.baseName || 'sphere-project-credentials';
    this._lookupFiles = options.lookupFiles || ["./." + this._baseName, "./." + this._baseName + ".json", "~/." + this._baseName, "~/." + this._baseName + ".json", "/etc/" + this._baseName, "/etc/" + this._baseName + ".json"];
  }

  ProjectCredentialsConfig.prototype._init = function() {
    return this._loadCredentials().then((function(_this) {
      return function(res) {
        _this._credentials = res;
        return _this;
      };
    })(this));
  };

  ProjectCredentialsConfig.prototype._loadCredentials = function() {
    var configsP;
    configsP = _.map(this._lookupFiles, (function(_this) {
      return function(path) {
        var normalizedPath;
        normalizedPath = _this._normalizePath(path);
        return fs.exists(path).then(function(exists) {
          if (exists) {
            return fs.read(path, 'r').then(function(contents) {
              if (_.endsWith(normalizedPath, ".json")) {
                return _this._readJsonConfig("" + contents);
              } else {
                return _this._readCsvConfig("" + contents);
              }
            });
          } else {
            return {};
          }
        });
      };
    })(this));
    return Q.all(configsP).then(function(configs) {
      return _.reduce(configs.reverse(), (function(acc, c) {
        return _.extend(acc, c);
      }), {});
    });
  };

  ProjectCredentialsConfig.prototype._readJsonConfig = function(contents) {
    var config;
    config = JSON.parse(contents);
    _.each(_.keys(config), function(key) {
      return config[key].project_key = key;
    });
    return Q(config);
  };

  ProjectCredentialsConfig.prototype._readCsvConfig = function(csvText) {
    var d;
    d = Q.defer();
    csv().from(csvText, {
      delimiter: ":"
    }).to.array(function(data) {
      var dataJson;
      dataJson = _.map(data, function(row) {
        return {
          project_key: row[0],
          client_id: row[1],
          client_secret: row[2]
        };
      });
      return d.resolve(_.reduce(dataJson, (function(acc, json) {
        acc[json.project_key] = json;
        return acc;
      }), {}));
    }).on('error', function(error) {
      return d.reject(error);
    });
    return d.promise;
  };


  /**
   * Returns project credentials for the project key.
   *
   * @param {String} key The project key
   * @returns Credentials have following structure: {project_key: 'key', client_id: 'foo', client_secret: 'bar'}
   */

  ProjectCredentialsConfig.prototype.forProjectKey = function(key) {
    return this.enrichCredentials({
      project_key: key
    });
  };


  /**
   * Enriches project credentials if client_id or client_secret are missing.
   *
   * @returns Credentials have following structure: {project_key: 'key', client_id: 'foo', client_secret: 'bar'}
   */

  ProjectCredentialsConfig.prototype.enrichCredentials = function(credentials) {
    if ((credentials.client_id != null) && (credentials.client_secret != null)) {
      return credentials;
    } else {
      if (this._credentials[credentials.project_key] != null) {
        return this._credentials[credentials.project_key];
      } else {
        throw new Error("Can't find credentials for project '" + credentials.project_key + "'.");
      }
    }
  };

  ProjectCredentialsConfig.prototype._normalizePath = function(path) {
    if ((path == null) || _.isBlank(path)) {
      throw new Error('Path is empty!');
    }
    return path.replace("~", this._getUserHome());
  };

  ProjectCredentialsConfig.prototype._getUserHome = function() {
    return process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
  };

  return ProjectCredentialsConfig;

})();

exports.ProjectCredentialsConfig = ProjectCredentialsConfig;
