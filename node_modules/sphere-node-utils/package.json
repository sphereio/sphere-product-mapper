{
  "name": "sphere-node-utils",
  "description": "Helpers to share among all SPHERE.IO node components.",
  "version": "0.3.3",
  "homepage": "https://github.com/sphereio/sphere-node-utils",
  "private": false,
  "author": {
    "name": "Hajo Eichler",
    "email": "hajo.eichler@commercetools.com",
    "url": "http://dev.sphere.io"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sphereio/sphere-node-utils.git"
  },
  "bugs": {
    "url": "https://github.com/sphereio/sphere-node-utils/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sphereio/sphere-node-utils/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/main",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "build": "grunt build",
    "postpublish": "rm -rf lib",
    "test": "grunt coverage"
  },
  "dependencies": {
    "bunyan": "~0.22.1",
    "q": "1.0.0",
    "q-io": "~1.10.9",
    "ssh2": "0.2.17",
    "underscore": "1.6.0",
    "underscore.string": "2.3.3",
    "csv": "0.3.7"
  },
  "devDependencies": {
    "coveralls": "~2.8.0",
    "grunt": "~0.4.2",
    "grunt-bump": "~0.0.13",
    "grunt-coffeelint": "~0.0.8",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-coffee": "~0.10.1",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-shell": "~0.6.4",
    "istanbul": "~0.2.4",
    "jasmine-node": "~1.13.1",
    "sphere-coffeelint": "sphereio/sphere-coffeelint.git#master"
  },
  "keywords": [],
  "readme": "![SPHERE.IO icon](https://admin.sphere.io/assets/images/sphere_logo_rgb_long.png)\n\n# Node.js Utils\n\n[![Build Status](https://secure.travis-ci.org/sphereio/sphere-node-utils.png?branch=master)](http://travis-ci.org/sphereio/sphere-node-utils) [![Coverage Status](https://coveralls.io/repos/sphereio/sphere-node-utils/badge.png)](https://coveralls.io/r/sphereio/sphere-node-utils) [![Dependency Status](https://david-dm.org/sphereio/sphere-node-utils.png?theme=shields.io)](https://david-dm.org/sphereio/sphere-node-utils) [![devDependency Status](https://david-dm.org/sphereio/sphere-node-utils/dev-status.png?theme=shields.io)](https://david-dm.org/sphereio/sphere-node-utils#info=devDependencies) [![NPM version](https://badge.fury.io/js/sphere-node-utils.png)](http://badge.fury.io/js/sphere-node-utils)\n\nThis module shares helpers among all [SPHERE.IO](http://sphere.io/) Node.js components.\n\n## Table of Contents\n* [Getting Started](#getting-started)\n* [Documentation](#documentation)\n  * [Helpers](#helpers)\n    * [Logger](#logger)\n    * [Sftp](#sftp)\n    * [ProjectCredentialsConfig](#projectcredentialsconfig)\n  * [Mixins](#mixins)\n    * [Qbatch](#qbatch)\n      * [all (batch processing)](#all-batch-processing)\n    * [Underscore](#underscore)\n      * [_.deepClone](#_deepclone)\n      * [_.percentage](#_percentage)\n      * [_.stringifyQuery](#_stringifyquery)\n      * [_.parseQuery](#_parsequery)\n* [Examples](#examples)\n* [Releasing](#releasing)\n* [License](#license)\n\n\n## Getting Started\n\n```coffeescript\nSphereUtils = require 'sphere-node-utils'\nLogger = SphereUtils.Logger\nSftp = SphereUtils.Sftp\nQbatch = SphereUtils.Qbatch\n_u = SphereUtils._u\n\n# or\n{Logger, Sftp, Qbatch, _u} = require 'sphere-node-utils'\n```\n\n## Documentation\n\n### Helpers\nCurrently following helpers are provided by `SphereUtils`:\n\n- `Logger`\n- `Sftp`\n\n#### Logger\nLogging is supported by the lightweight JSON logging module called [Bunyan](https://github.com/trentm/node-bunyan).\n\nThe `Logger` can be configured with following options\n```coffeescript\nlogConfig:\n  levelStream: 'info' # log level for stdout stream\n  levelFile: 'debug' # log level for file stream\n  path: './sphere-node-utils-debug.log' # where to write the file stream\n  name: 'sphere-node-utils' # name of the application\n  serializers:\n    request: reqSerializer # function that maps the request object with fields (uri, method, headers)\n    response: resSerializer # function that maps the response object with fields (status, headers, body)\n  src: false # includes a log of the call source location (file, line, function).\n             # Determining the source call is slow, therefor it's recommended not to enable this on production.\n  streams: [ # a list of streams that defines the type of output for log messages\n    {level: 'info', stream: process.stdout}\n    {level: 'debug', path: './sphere-node-utils-debug.log'}\n  ]\n```\n\n> A `Logger` instance should be extended by the component that needs logging by providing the correct configuration\n\n```coffeescript\n{Logger} = require 'sphere-node-utils'\n\nmodule.exports = class extends Logger\n\n  # we can override here some of the configuration options\n  @appName: 'my-application-name'\n  @path: './my-application-name.log'\n```\n\nA `Bunyan` logger can also be created from another existing logger. This is useful to connect sub-components of the same application by sharing the same configuration.\nThis concept is called **[child logger](https://github.com/trentm/node-bunyan#logchild)**.\n\n```coffeescript\n{Logger} = require 'sphere-node-utils'\nclass MyCustomLogger extends Logger\n  @appName: 'my-application-name'\n\nmyLogger = new MyCustomLogger logConfig\n\n# assume we have a component which already implements logging\nappWithLogger = new AppWithLogger\n  logConfig:\n    logger: myLogger\n\n# now we can use `myLogger` to log and everything logged from the child logger of `AppWithLogger`\n# will be logged with a `widget_type` field, meaning the log comes from the child logger\n```\n\nOnce you configure your logger, you will get JSON stream of logs based on the level you defined. This is great for processing, but not for really human-friendly.\nThis is where the `bunyan` command-line tool comes in handy, by providing **pretty-printed** logs and **filtering**. More info [here](https://github.com/trentm/node-bunyan#cli-usage).\n\n```bash\n# examples\n\n# this will output the content of the log file in a `short` format\nbunyan sphere-node-connect-debug.log -o short\n00:31:47.760Z  INFO sphere-node-connect: Retrieving access_token...\n00:31:48.232Z  INFO sphere-node-connect: GET /products\n\n# directly pipe the stdout stream\njasmine-node --verbose --captureExceptions test | ./node_modules/bunyan/bin/bunyan -o short\n00:34:03.936Z DEBUG sphere-node-connect: OAuth constructor initialized. (host=auth.sphere.io, accessTokenUrl=/oauth/token, timeout=20000, rejectUnauthorized=true)\n    config: {\n      \"client_id\": \"S6AD07quPeeTfRoOHXdTx2NZ\",\n      \"client_secret\": \"7d3xSWTN5jQJNpnRnMLd4qICmfahGPka\",\n      \"project_key\": \"my-project\",\n      \"oauth_host\": \"auth.sphere.io\",\n      \"api_host\": \"api.sphere.io\"\n    }\n00:34:03.933Z DEBUG sphere-node-connect: Failed to retrieve access_token, retrying...1\n\n```\n\n#### Sftp\n_(Coming soon)_\n\n#### ProjectCredentialsConfig\n\nProvides sphere credentials based on the project key.\n\nFollowing files are used to store the credentials and would be searched (descending priority):\n\n* ./.sphere-project-credentials\n* ./.sphere-project-credentials.json\n* ~/.sphere-project-credentials\n* ~/.sphere-project-credentials.json\n* /etc/.sphere-project-credentials\n* /etc/.sphere-project-credentials.json\n\n### Mixins\nCurrently following mixins are provided by `SphereUtils`:\n\n- `Qbatch`\n  - `all`\n- `underscore`\n  - `deepClone`\n  - `percentage`\n  - `stringifyQuery`\n  - `parseQuery`\n\n#### Qbatch\n\n##### `all` (batch processing)\nBatch processing allows a list of promises to be executed in chunks, by defining a limit to how many requests can be sent in parallel.\nThe `Qbatch.all` function is actually a promise itself which recursively resolves all given promises in batches.\n\n```coffeescript\n# let's assume we have a bunch of promises (e.g.: 200)\nallPromises = [p1, p2, p3, ...]\n\nQbatch.all(allPromises)\n.then (result) ->\n.fail (error) ->\n```\n\nDefault max number of parallel request is `**50**`, you can configure this in the second argument.\n\n```coffeescript\n# with custom limit (max number of parallel requests)\nQbatch.all(allPromises, 100)\n.then (result) ->\n.fail (error) ->\n```\n\nYou can also subscribe to **progress notifications** of the promise\n\n```coffeescript\nQbatch.all(allPromises)\n.then (result) ->\n.progress (progress) ->\n  # progress is an object containing the current progress percentage\n  # and the value of the current results (array)\n  # {percentage: 20, value: [r1, r2, r3, ...]}\n.fail (error) ->\n```\n\n#### Underscore\nA collection of methods to be used as `underscore` mixins. To install\n\n```coffeescript\n_ = require 'underscore'\n{_u} = require 'sphere-node-utils'\n_.mixin _u\n\n# or\n_.mixin require('sphere-node-utils')._u\n```\n\n##### `_.deepClone`\nReturns a deep clone of the given object\n\n```coffeescript\nobj = {...} # some object with nested values\ncloned = _.deepClone(obj)\n```\n\n##### `_.percentage`\nReturns the percentage of the given values\n\n```coffeescript\nvalue = _.percentage(30, 500)\n# => 6\n```\n\n##### `_.stringifyQuery`\nReturns a URL query string from a key-value object\n\n```coffeescript\nparams =\n  where: encodeURIComponent('name = \"Foo\"')\n  staged: true\n  limit: 100\n  offset: 2\n_.stringifyQuery(params)\n# => 'where=name%20%3D%20%22Foo%22&staged=true&limit=100&offset=2'\n```\n\n##### `_.parseQuery`\nReturns a key-value JSON object from a query string\n> Note that all values are parsed as string\n\n```coffeescript\nquery = 'where=name%20%3D%20%22Foo%22&staged=true&limit=100&offset=2'\n_.parseQuery(query)\n# => {where: encodeURIComponent('name = \"Foo\"'), staged: 'true', limit: '100', offset: '2'}\n```\n\n## Examples\n_(Coming soon)_\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\nMore info [here](CONTRIBUTING.md)\n\n## Releasing\nReleasing a new version is completely automated using the Grunt task `grunt release`.\n\n```javascript\ngrunt release // patch release\ngrunt release:minor // minor release\ngrunt release:major // major release\n```\n\n## License\nCopyright (c) 2014 SPHERE.IO\nLicensed under the [MIT license](LICENSE-MIT).\n",
  "readmeFilename": "README.md",
  "_id": "sphere-node-utils@0.3.3",
  "_from": "sphere-node-utils@0.3.3"
}
